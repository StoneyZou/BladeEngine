#ifndef __BLADE_RHI_RHI_ENUM_H__
#define __BLADE_RHI_RHI_ENUM_H__

#include <CharDefine.h>
#include <TypeDefine.h>

namespace BladeEngine
{

    enum EINPUT_CLASSIFICATION
    {
        EINPUT_PER_VERTEX_DATA,
        EINPUT_PER_INSTANCE_DATA,
    };

    enum EDATA_FORMAT
    {
        EDATA_FORMAT_FLOAT4,
        EDATA_FORMAT_FLOAT3,
        EDATA_FORMAT_FLOAT2,
        EDATA_FORMAT_FLOAT,
    };

    enum ETEX_FORMAT_LAYOUT : uint16
    {
        ETEX_FORMAT_LAYOUT_R8G8B8A8 = 0,
        ETEX_FORMAT_LAYOUT_D32S8,
        ETEX_FORMAT_LAYOUT_D32,
        ETEX_FORMAT_LAYOUT_D24S8,
        ETEX_FORMAT_LAYOUT_D24,
        ETEX_FORMAT_LAYOUT_D16,
    };

    enum ETEX_FORMAT_TYPE : uint8
    {
        ETEX_FORMAT_TYPE_INTERNAL = 0,    // 仅用于特殊使用的内部类型
        ETEX_FORMAT_TYPE_TYPELESS,
        ETEX_FORMAT_TYPE_UINT,
        ETEX_FORMAT_TYPE_SINT,
        ETEX_FORMAT_TYPE_FLOAT,
        ETEX_FORMAT_TYPE_UNORM,
        ETEX_FORMAT_TYPE_SNORM,
    };

    enum ETEX_FORMAT_USAGE : uint8
    {
        ETEX_FORMAT_USAGE_RENDER_TARGET = 0x0000,    // 仅用于特殊使用的内部类型
        ETEX_FORMAT_USAGE_DEPTH_STENCIL = 0x0001,
        ETEX_FORMAT_USAGE_SHADER_RESOURCE = 0x0002,
        ETEX_FORMAT_USAGE_R_S = ETEX_FORMAT_USAGE_RENDER_TARGET | ETEX_FORMAT_USAGE_SHADER_RESOURCE,
    };

    static const uint32 DATA_LAYOUT_SHIFT = 16;
    static const uint32 DATA_LAYOUT_MASK = 0xffff0000;
    static const uint32 DATA_TYPE_SHIFT = 8;
    static const uint32 DATA_TYPE_MASK = 0x00ff00;
    static const uint32 DATA_USAGE_SHIFT = 0;
    static const uint32 DATA_USAGE_MASK = 0x0000ff;

    #define GenDataFormat(layout, type, usage) (layout << DATA_LAYOUT_SHIFT) | (type << DATA_TYPE_SHIFT) | (usage << DATA_USAGE_SHIFT)

    enum ETEX_FORMAT
    {
        EDATA_FORMAT_R8G8B8A8_TYPELESS =    GenDataFormat(ETEX_FORMAT_LAYOUT_R8G8B8A8,    ETEX_FORMAT_TYPE_TYPELESS,     ETEX_FORMAT_USAGE_SHADER_RESOURCE),
        EDATA_FORMAT_R8G8B8A8_UINT =        GenDataFormat(ETEX_FORMAT_LAYOUT_R8G8B8A8,    ETEX_FORMAT_TYPE_UINT,         ETEX_FORMAT_USAGE_SHADER_RESOURCE),
        EDATA_FORMAT_R8G8B8A8_SINT =        GenDataFormat(ETEX_FORMAT_LAYOUT_R8G8B8A8,    ETEX_FORMAT_TYPE_SINT,         ETEX_FORMAT_USAGE_SHADER_RESOURCE),
        EDATA_FORMAT_R8G8B8A8_UNORM =       GenDataFormat(ETEX_FORMAT_LAYOUT_R8G8B8A8,    ETEX_FORMAT_TYPE_UNORM,        ETEX_FORMAT_USAGE_R_S),
        EDATA_FORMAT_R8G8B8A8_SNORM =       GenDataFormat(ETEX_FORMAT_LAYOUT_R8G8B8A8,    ETEX_FORMAT_TYPE_SNORM,        ETEX_FORMAT_USAGE_SHADER_RESOURCE),
        EDATA_FORMAT_D32_FLOAT_S8_UINT =    GenDataFormat(ETEX_FORMAT_LAYOUT_D32S8,       ETEX_FORMAT_TYPE_INTERNAL,     ETEX_FORMAT_USAGE_DEPTH_STENCIL),
        EDATA_FORMAT_D32_FLOAT =            GenDataFormat(ETEX_FORMAT_LAYOUT_D32,         ETEX_FORMAT_TYPE_INTERNAL,     ETEX_FORMAT_USAGE_DEPTH_STENCIL),
        EDATA_FORMAT_D24_UNORM_S8_UINT =    GenDataFormat(ETEX_FORMAT_LAYOUT_D24S8,       ETEX_FORMAT_TYPE_INTERNAL,     ETEX_FORMAT_USAGE_DEPTH_STENCIL),
        EDATA_FORMAT_D24_UNORM =            GenDataFormat(ETEX_FORMAT_LAYOUT_D24,         ETEX_FORMAT_TYPE_INTERNAL,     ETEX_FORMAT_USAGE_DEPTH_STENCIL),
        EDATA_FORMAT_D16_UNORM =            GenDataFormat(ETEX_FORMAT_LAYOUT_D16,         ETEX_FORMAT_TYPE_INTERNAL,     ETEX_FORMAT_USAGE_DEPTH_STENCIL),
    };

    struct RHIDataFormat
    {
        static ETEX_FORMAT_LAYOUT GetLayout(ETEX_FORMAT format)
        {
            return (ETEX_FORMAT_LAYOUT)((format & DATA_LAYOUT_MASK) >> DATA_LAYOUT_SHIFT);
        }

        static ETEX_FORMAT_TYPE GetDataType(ETEX_FORMAT format)
        { 
            return (ETEX_FORMAT_TYPE)((format & DATA_TYPE_MASK) >> DATA_TYPE_SHIFT);
        }

        static ETEX_FORMAT_USAGE GetDataUsage(ETEX_FORMAT format)
        { 
            return (ETEX_FORMAT_USAGE)((format & DATA_USAGE_MASK) >> DATA_USAGE_SHIFT);
        }

        static bool CheckDateUsage(ETEX_FORMAT format, ETEX_FORMAT_USAGE usage)
        {
            return (GetDataUsage(format) & (int)usage) != 0;
        }
    };

    enum ETEXTURE_USAGE
    {
        ETEXTURE_USAGE_DEPTH_STENCIL = 0x01,
        ETEXTURE_USAGE_RENDER_TARGET = 0x02,
        ETEXTURE_USAGE_SHADER_RESOURCE = 0x04,
    };

    enum ENUM_SHADER_TYPE
    {
        VERTEX_SHADER,
        HULL_SHADER,
        DOMAIM_SHADER,
        GEOMETRY_SHADER,
        PIXEL_SHADER,
    };

    enum ESHADER_ATTRIB_TYPE
    {
        ESHADER_ATTRIB_BOOL,
        ESHADER_ATTRIB_FLOAT,
        ESHADER_ATTRIB_INT,
    };

    enum ESHADER_RESOURCE_TYPE
    {
        ESHADER_RESOURCE_UNKNOWN = -1,
        ESHADER_RESOURCE_TEXTURE = 0,
        ESHADER_RESOURCE_SAMPLER,
    };

    enum ESHADER_SEMANTIC_TYPE
    {
        ESHADER_SEMANTIC_UNKNOWN = -1,
        ESHADER_SEMANTIC_BINORMAL = 0,
        ESHADER_SEMANTIC_BLENDINDICES,
        ESHADER_SEMANTIC_BLENDWEIGHT,
        ESHADER_SEMANTIC_COLOR,
        ESHADER_SEMANTIC_NORMAL,
        ESHADER_SEMANTIC_POSITION,
        ESHADER_SEMANTIC_POSITIONT,
        ESHADER_SEMANTIC_PSIZE,
        ESHADER_SEMANTIC_TANGENT,
        ESHADER_SEMANTIC_TEXCOORD,
    };

    enum ECPU_GPU_USAGE_MODE
    {
        ESUIT_GPU_WRITE,
        ESUIT_GPU_READ,
        ESUIT_GPU_READ_WRITE,
        ESUIT_GPU_READ_CPU_WRITE,
    };

    enum ECPU_ACCESS_MODE
    {
        ECPU_NO_ACCESS = 0x00,
        ECPU_READ_ACCESS_MODE = 0x01,
        ECPU_WRITE_ACCESS_MODE = 0x02,
        ECPU_READ_WRITE_MODE = ECPU_READ_ACCESS_MODE | ECPU_WRITE_ACCESS_MODE,
    };

    enum ERES_LOCK_SUB_TYPE
    {
        ERES_LOCK_READ = 0x01,
        ERES_LOCK_WRITE = 0x02,
        ERES_LOCK_DISCARD = 0x04,
    };

    enum ERES_LOCK_TYPE
    {
        ERES_LOCK_ONLY_READ = ERES_LOCK_READ,
        ERES_LOCK_ONLY_WRITE = ERES_LOCK_WRITE,
        ERES_LOCK_READ_WRITE = ERES_LOCK_READ & ERES_LOCK_WRITE,
        ERES_LOCK_WRITE_DISCARD = ERES_LOCK_WRITE & ERES_LOCK_DISCARD,
    };

    enum EMESH_FILL_MODE
    {
        EMESH_FILL_WIREFRAME,
        EMESH_FILL_SOLID,
    };

    enum EFACE_CULL_MODE
    {
        EFACE_CULL_NONE,
        EFACE_CULL_FRONT,
        EFACE_CULL_BACK,
    };

    enum EBLEND_ARG
    {
        EBLEND_ARG_ZERO = 1,
        EBLEND_ARG_ONE = 2,
        EBLEND_ARG_SRC_COLOR = 3,
        EBLEND_ARG_INV_SRC_COLOR = 4,
        EBLEND_ARG_SRC_ALPHA = 5,
        EBLEND_ARG_INV_SRC_ALPHA = 6,
        EBLEND_ARG_DEST_ALPHA = 7,
        EBLEND_ARG_INV_DEST_ALPHA = 8,
        EBLEND_ARG_DEST_COLOR = 9,
        EBLEND_ARG_INV_DEST_COLOR = 10,
        EBLEND_ARG_SRC_ALPHA_SAT = 11,
        EBLEND_ARG_BLEND_FACTOR = 14,
        EBLEND_ARG_INV_BLEND_FACTOR = 15,
        EBLEND_ARG_SRC1_COLOR = 16,
        EBLEND_ARG_INV_SRC1_COLOR = 17,
        EBLEND_ARG_SRC1_ALPHA = 18,
        EBLEND_ARG_INV_SRC1_ALPHA = 19
    };

    enum EBLEND_FUNC
    {
        EBLEND_FUNC_ADD = 1,
        EBLEND_FUNC_SUBTRACT = 2,
        EBLEND_FUNC_REV_SUBTRACT = 3,
        EBLEND_FUNC_MIN = 4,
        EBLEND_FUNC_MAX = 5
    };

    enum ECOMPARISON_FUNC
    {
        ECOMPARISON_NEVER = 1,
        ECOMPARISON_LESS = 2,
        ECOMPARISON_EQUAL = 3,
        ECOMPARISON_LESS_EQUAL = 4,
        ECOMPARISON_GREATER = 5,
        ECOMPARISON_NOT_EQUAL = 6,
        ECOMPARISON_GREATER_EQUAL = 7,
        ECOMPARISON_ALWAYS = 8
    };

    enum EDEPTH_STENCIL_WRITE_FUNC
    {
        EDEPTH_STENCIL_WRITE_KEEP = 1,
        EDEPTH_STENCIL_WRITE_ZERO = 2,
        EDEPTH_STENCIL_WRITE_REPLACE = 3,
        EDEPTH_STENCIL_WRITE_INCR_SAT = 4,
        EDEPTH_STENCIL_WRITE_DECR_SAT = 5,
        EDEPTH_STENCIL_WRITE_INVERT = 6,
        EDEPTH_STENCIL_WRITE_INCR = 7,
        EDEPTH_STENCIL_WRITE_DECR = 8
    };

    enum ETEXTURE_ADDRESS_MODE
    {
        ETEXTURE_ADDRESS_WRAP = 1,
        ETEXTURE_ADDRESS_CLAMP = 2,
    };

    enum ETEXTURE_FILTER_SUB_MODE
    {
        ETEXTURE_FILTER_MIN_POINT = 0x0001,
        ETEXTURE_FILTER_MAG_POINT = 0x0002,
        ETEXTURE_FILTER_MIP_POINT = 0x0004,
        ETEXTURE_FILTER_MIN_LINEAR = 0x0008,
        ETEXTURE_FILTER_MAG_LINEAR = 0x0010,
        ETEXTURE_FILTER_MIP_LINEAR = 0x0020,
    };

    enum ETEXTURE_FILTER_MODE
    {
        ETEXTURE_FILTER_MIN_MAG_MIP_POINT = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_POINT,

        ETEXTURE_FILTER_MIN_LINEAR_MAG_MIP_POINT = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_POINT,
        ETEXTURE_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_POINT,
        ETEXTURE_FILTER_MIN_MAG_POINT_MIP_LINEAR = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_LINEAR,

        ETEXTURE_FILTER_MIN_MAG_LINEAR_MIP_POINT = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_POINT,
        ETEXTURE_FILTER_MIN_POINT_MAG_MIP_LINEAR = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_LINEAR,
        ETEXTURE_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_LINEAR,

        ETEXTURE_FILTER_MIN_MAG_MIP_LINEAR = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_LINEAR,
    };

    enum ESHADER_TYPE
    {
        ESHADER_VERTEX,
        ESHADER_HULL,
        ESHADER_DOMAIN,
        ESHADER_GEOMETRY,
        ESHADER_PIXEL,
    };
}

#endif  //!__BLADE_RHI_RHI_ENUM_H__