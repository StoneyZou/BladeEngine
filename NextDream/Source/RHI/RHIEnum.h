#ifndef __BLADE_RHI_RHI_ENUM_H__
#define __BLADE_RHI_RHI_ENUM_H__

#include <CharDefine.h>
#include <TypeDefine.h>

namespace BladeEngine
{
    namespace RHI
    {
        enum EINPUT_CLASSIFICATION
        {
            EINPUT_PER_VERTEX_DATA,
            EINPUT_PER_INSTANCE_DATA,
        };

        enum EDATA_LAYOUT_DESC
        {
            EDATA_LAYOUT_R8G8B8A8 = 0,
            EDATA_FORMAT_R32G32B32A32 = 1,
        };

        enum EDATA_ELEMENT_TYPE
        {
            EDATA_ELEMENT_UINT = 0x0001,
            EDATA_ELEMENT_SINT = 0x0002,
            EDATA_ELEMENT_FLOAT = 0x0004,
            EDATA_ELEMENT_TYPELESS = 0x0008,
        };

        static const uint32 DATA_LAYOUT_SHIFT = 16;

        enum EDATA_FORMAT
        {
            EDATA_FORMAT_R8G8B8A8_UINT =        ( EDATA_LAYOUT_R8G8B8A8 << DATA_LAYOUT_SHIFT ) + EDATA_ELEMENT_UINT,
            EDATA_FORMAT_R8G8B8A8_SINT =        ( EDATA_LAYOUT_R8G8B8A8 << DATA_LAYOUT_SHIFT ) + EDATA_ELEMENT_SINT,
            EDATA_FORMAT_R8G8B8A8_FLOAT =       ( EDATA_LAYOUT_R8G8B8A8 << DATA_LAYOUT_SHIFT ) + EDATA_ELEMENT_FLOAT,
            EDATA_FORMAT_R8G8B8A8_TYPELESS =    ( EDATA_LAYOUT_R8G8B8A8 << DATA_LAYOUT_SHIFT ) + EDATA_ELEMENT_TYPELESS, 
            EDATA_FORMAT_R32G32B32A32_UINT = (EDATA_FORMAT_R32G32B32A32 << DATA_LAYOUT_SHIFT) + EDATA_ELEMENT_UINT,
            EDATA_FORMAT_R32G32B32A32_SINT = (EDATA_FORMAT_R32G32B32A32 << DATA_LAYOUT_SHIFT) + EDATA_ELEMENT_SINT,
            EDATA_FORMAT_R32G32B32A32_FLOAT = (EDATA_FORMAT_R32G32B32A32 << DATA_LAYOUT_SHIFT) + EDATA_ELEMENT_FLOAT,
            EDATA_FORMAT_R32G32B32A32_TYPELESS = (EDATA_FORMAT_R32G32B32A32 << DATA_LAYOUT_SHIFT) + EDATA_ELEMENT_TYPELESS,
        };

        enum ETEXTURE_USAGE
        {
            ETEXTURE_USAGE_DEPTH_STENCIL = 0x01,
            ETEXTURE_USAGE_RENDER_TARGET = 0x02,
            ETEXTURE_USAGE_SHADER_RESOURCE = 0x04,
        };

        enum ENUM_SHADER_TYPE
        {
            VERTEX_SHADER,
            HULL_SHADER,
            DOMAIM_SHADER,
            GEOMETRY_SHADER,
            PIXEL_SHADER,
        };

        enum ESHADER_ATTRIB_TYPE
        {
            ESHADER_ATTRIB_FLOAT1,
            ESHADER_ATTRIB_FLOAT2,
            ESHADER_ATTRIB_FLOAT3,
            ESHADER_ATTRIB_FLOAT4,
            ESHADER_ATTRIB_INT1,
            ESHADER_ATTRIB_INT2,
            ESHADER_ATTRIB_INT3,
            ESHADER_ATTRIB_INT4,
            ESHADER_ATTRIB_TEX1D,
            ESHADER_ATTRIB_TEX2D,
            ESHADER_ATTRIB_TEX3D,
            ESHADER_ATTRIB_TEXCUBE,
            ESHADER_ATTRIB_TEX1D_ARRAY,
            ESHADER_ATTRIB_TEX2D_ARRAY,
            ESHADER_ATTRIB_TEX3D_ARRAY,
            ESHADER_ATTRIB_TEXCUBE_ARRAY,
        };

        enum ESHADER_RESOURCE_TYPE
        {
            ESHADER_RESOURCE_UNKNOWN = -1,
            ESHADER_RESOURCE_TEXTURE2D = 0,
            ESHADER_RESOURCE_SAMPLER,
        };

        enum ESHADER_SEMANTIC_TYPE
        {
            ESHADER_SEMANTIC_UNKNOWN = -1,
            ESHADER_SEMANTIC_BINORMAL = 0,
            ESHADER_SEMANTIC_BLENDINDICES,
            ESHADER_SEMANTIC_BLENDWEIGHT,
            ESHADER_SEMANTIC_COLOR,
            ESHADER_SEMANTIC_NORMAL,
            ESHADER_SEMANTIC_POSITION,
            ESHADER_SEMANTIC_POSITIONT,
            ESHADER_SEMANTIC_PSIZE,
            ESHADER_SEMANTIC_TANGENT,
            ESHADER_SEMANTIC_TEXCOORD,
        };

        enum ECPU_GPU_ACCESS_SUB_MODE
        {
            ECPU_READ = 0x01,
            ECPU_WRITE = 0x02,
            EGPU_READ = 0x04,
            EGPU_WRITE = 0x08,
        };

        enum ECPU_GPU_ACCESS_MODE
        {
            EONLY_GPU_READ = EGPU_READ,
            EONLY_CPU_READ = EGPU_READ,
            ECPU_READ_CPU_WRITE = ECPU_READ | ECPU_WRITE,
            EGPU_READ_CPU_WRITE = EGPU_READ | ECPU_WRITE,
            EGPU_READ_GPU_WRITE = EGPU_READ | EGPU_WRITE,
        };

        enum ERES_LOCK_SUB_TYPE
        {
            ERES_LOCK_READ = 0x01,
            ERES_LOCK_WRITE = 0x02,
            ERES_LOCK_DISCARD = 0x04,
        };

        enum ERES_LOCK_TYPE
        {
            ERES_LOCK_ONLY_READ = ERES_LOCK_READ,
            ERES_LOCK_ONLY_WRITE = ERES_LOCK_WRITE,
            ERES_LOCK_READ_WRITE = ERES_LOCK_READ & ERES_LOCK_WRITE,
            ERES_LOCK_WRITE_DISCARD = ERES_LOCK_WRITE & ERES_LOCK_DISCARD,
        };

        enum EMESH_FILL_MODE
        {
            EMESH_FILL_WIREFRAME,
            EMESH_FILL_SOLID,
        };

        enum EFACE_CULL_MODE
        {
            EFACE_CULL_NONE,
            EFACE_CULL_FRONT,
            EFACE_CULL_BACK,
        };

        enum EBLEND_ARG
        {
            EBLEND_ARG_ZERO = 1,
            EBLEND_ARG_ONE = 2,
            EBLEND_ARG_SRC_COLOR = 3,
            EBLEND_ARG_INV_SRC_COLOR = 4,
            EBLEND_ARG_SRC_ALPHA = 5,
            EBLEND_ARG_INV_SRC_ALPHA = 6,
            EBLEND_ARG_DEST_ALPHA = 7,
            EBLEND_ARG_INV_DEST_ALPHA = 8,
            EBLEND_ARG_DEST_COLOR = 9,
            EBLEND_ARG_INV_DEST_COLOR = 10,
            EBLEND_ARG_SRC_ALPHA_SAT = 11,
            EBLEND_ARG_BLEND_FACTOR = 14,
            EBLEND_ARG_INV_BLEND_FACTOR = 15,
            EBLEND_ARG_SRC1_COLOR = 16,
            EBLEND_ARG_INV_SRC1_COLOR = 17,
            EBLEND_ARG_SRC1_ALPHA = 18,
            EBLEND_ARG_INV_SRC1_ALPHA = 19
        };

        enum EBLEND_FUNC
        {
            EBLEND_FUNC_ADD = 1,
            EBLEND_FUNC_SUBTRACT = 2,
            EBLEND_FUNC_REV_SUBTRACT = 3,
            EBLEND_FUNC_MIN = 4,
            EBLEND_FUNC_MAX = 5
        };

        enum ECOMPARISON_FUNC
        {
            ECOMPARISON_NEVER = 1,
            ECOMPARISON_LESS = 2,
            ECOMPARISON_EQUAL = 3,
            ECOMPARISON_LESS_EQUAL = 4,
            ECOMPARISON_GREATER = 5,
            ECOMPARISON_NOT_EQUAL = 6,
            ECOMPARISON_GREATER_EQUAL = 7,
            ECOMPARISON_ALWAYS = 8
        };

        enum EDEPTH_STENCIL_WRITE_FUNC
        {
            EDEPTH_STENCIL_WRITE_KEEP = 1,
            EDEPTH_STENCIL_WRITE_ZERO = 2,
            EDEPTH_STENCIL_WRITE_REPLACE = 3,
            EDEPTH_STENCIL_WRITE_INCR_SAT = 4,
            EDEPTH_STENCIL_WRITE_DECR_SAT = 5,
            EDEPTH_STENCIL_WRITE_INVERT = 6,
            EDEPTH_STENCIL_WRITE_INCR = 7,
            EDEPTH_STENCIL_WRITE_DECR = 8
        };

        enum ETEXTURE_ADDRESS_MODE
        {
            ETEXTURE_ADDRESS_WRAP = 1,
            ETEXTURE_ADDRESS_CLAMP = 2,
        };

        enum ETEXTURE_FILTER_SUB_MODE
        {
            ETEXTURE_FILTER_MIN_POINT = 0x0001,
            ETEXTURE_FILTER_MAG_POINT = 0x0002,
            ETEXTURE_FILTER_MIP_POINT = 0x0004,
            ETEXTURE_FILTER_MIN_LINEAR = 0x0008,
            ETEXTURE_FILTER_MAG_LINEAR = 0x0010,
            ETEXTURE_FILTER_MIP_LINEAR = 0x0020,
        };

        enum ETEXTURE_FILTER_MODE
        {
            ETEXTURE_FILTER_MIN_MAG_MIP_POINT = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_POINT,

            ETEXTURE_FILTER_MIN_LINEAR_MAG_MIP_POINT = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_POINT,
            ETEXTURE_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_POINT,
            ETEXTURE_FILTER_MIN_MAG_POINT_MIP_LINEAR = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_LINEAR,

            ETEXTURE_FILTER_MIN_MAG_LINEAR_MIP_POINT = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_POINT,
            ETEXTURE_FILTER_MIN_POINT_MAG_MIP_LINEAR = ETEXTURE_FILTER_MIN_POINT | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_LINEAR,
            ETEXTURE_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_POINT | ETEXTURE_FILTER_MIP_LINEAR,

            ETEXTURE_FILTER_MIN_MAG_MIP_LINEAR = ETEXTURE_FILTER_MIN_LINEAR | ETEXTURE_FILTER_MAG_LINEAR | ETEXTURE_FILTER_MIP_LINEAR,
        };

        enum ESHADER_TYPE
        {
            ESHADER_VERTEX,
            ESHADER_HULL,
            ESHADER_DOMAIN,
            ESHADER_GEOMETRY,
            ESHADER_PIXEL,
        };
    }
}

#endif  //!__BLADE_RHI_RHI_ENUM_H__